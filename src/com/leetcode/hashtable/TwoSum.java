package com.leetcode.hashtable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * https://leetcode-cn.com/problems/two-sum/
 * <p>
 * Given an array of integers, return indices of the two numbers such that they add up to a specific
 * target. You may assume that each input would have exactly one solution.
 * <p>
 * Example: Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return
 * [0, 1].
 */
public class TwoSum {

//    private static int[] nums = new int[]{
//            2, 7, 11, 15
//    };
//    private static int target = 9;

    private static int[] nums = new int[]{
            10675, 26120, 53998, 71072, 70270, 82795, 64511, 79338, 48888, 55919, 82082, 81716,
            87699, 42068, 66042, 9536, 88059, 51027, 30393, 3127, 31786, 62590, 35099, 63878, 45778,
            64105, 44564, 79878, 7846, 99063, 87166, 42230, 48853, 76080, 73446, 42201, 82189,
            46518, 80737, 82029, 70072, 15759, 1711, 27432, 99727, 76059, 11929, 71913, 72739,
            38859, 15248, 70052, 16757, 11200, 34410, 42181, 36753, 77772, 8442, 99023, 38505,
            46717, 12672, 48152, 41935, 99967, 28468, 15402, 88268, 64082, 75905, 58038, 93916,
            87865, 66709, 63386, 48998, 33998, 19077, 2827, 14783, 94835, 13185, 78011, 31218,
            95471, 49568, 46865, 42217, 94695, 52935, 77905, 60012, 49676, 52032, 47213, 37144,
            46246, 3749, 62797, 80074, 24984, 57738, 67983, 53671, 55363, 77901, 81976, 8168, 80660,
            22023, 92570, 86476, 62618, 60116, 56045, 67903, 15712, 78388, 57961, 40535, 89941,
            71790, 2685, 19584, 98696, 85290, 90286, 88178, 91053, 27428, 76521, 23969, 22559,
            35598, 19921, 56947, 85271, 56095, 2725, 9365, 75283, 61069, 53762, 91178, 86148, 59077,
            82724, 9757, 79597, 29339, 20102, 17895, 79732, 77376, 99024, 48720, 14669, 55933,
            64798, 23479, 2138, 42197, 70615, 34375, 54107, 42150, 60092, 89575, 64957, 86428,
            30469, 24920, 63335, 88619, 13374, 94266, 82754, 17069, 91937, 43361, 91909, 4366,
            81000, 89181, 79206, 49752, 96589, 13612, 99462, 69176, 45151, 25287, 29384, 53520,
            72001, 57287, 36570, 1364, 69018, 95619, 14027, 97033, 98984, 24872, 87992, 21370,
            21341, 91485, 72519, 55795, 64691, 3277, 95168, 80877, 27987, 39741, 36058, 80478,
            63460, 57633, 41584, 83890, 40292, 54856, 39192, 15091, 36608, 34242, 11782, 14578,
            5138, 13263, 12798, 65431, 66908, 59137, 46962, 13798, 38124, 54402, 57194, 14142,
            98101, 71201, 29759, 50689, 74296, 92231, 5226, 8495, 42196, 64532, 47458, 19213, 5276,
            81032, 15610, 57419, 51329, 85457, 49443, 13454, 62903, 48268, 72696, 6516, 19294,
            32757, 3502, 41374, 39384, 4634, 90299, 69037, 75203, 24680, 27390, 84636, 76894, 5621,
            17990, 49478, 24531, 34325, 7854, 70791, 74402, 33666, 25255, 19406, 7428, 2217, 80991,
            46085, 3516, 49432, 30234, 41932, 96152, 46217, 93854, 99063, 98412, 56667, 46284,
            43469, 53262, 72499, 48832, 38183, 42099, 6665, 57048, 13928, 94931, 19174, 19155,
            16833, 13106, 16099, 8378, 89306, 76903, 95799, 62752, 17481, 11763, 37462, 55012,
            35726, 91002, 11097, 57161, 81444, 61974, 88334, 46093, 31776, 94491, 43969, 3907,
            65959, 25318, 10407, 23112, 44654, 14244, 47310, 51378, 38348, 29662, 21888, 22796,
            86003, 33706, 88970, 89673, 33600, 24929, 75840, 2942, 82635, 79720, 83048, 62500,
            59977, 89801, 12487, 36871, 44974, 7065, 56207, 46725, 96336, 57124, 48470, 54362,
            86243, 82366, 21860, 57639, 5510, 24905, 44943, 9378, 74541, 53748, 17782, 85413, 42602,
            51609, 90487, 14186, 97183, 16913, 35624, 37863, 29518, 60590, 93655, 23921, 63065,
            19875, 22613, 72995, 86669, 17948, 78888, 17302, 40484, 21801, 56754, 51765, 19144,
            85858, 61092, 92396, 41582, 5648, 3178, 10078, 87335, 90170, 87416, 28145, 67378, 95146,
            29124, 73787, 62188, 31710, 19112, 57910, 10165, 27246, 32862, 95117, 88914, 16701,
            95687, 6216, 26014, 27386, 89862, 15163, 54297, 97315, 47384, 86594, 35108, 2362, 50088,
            74082, 22201, 39971, 47860, 19220, 23987, 64242, 82720, 76183, 32545, 26558, 11437,
            26235, 73194, 28436, 58430, 30904, 3634, 12242, 11826, 20386, 60102, 48647, 57994,
            53510, 7890, 85169, 52525, 9750, 74556, 17465, 89474, 24849, 22688, 69575, 77753, 17826,
            38653, 41269, 69359, 41211, 94348, 81134, 98646, 3390, 92164, 11908, 28226, 96185,
            26104, 94061, 54173, 10348, 76906, 3733, 21759, 77451, 2515, 65232, 80155, 50367, 40858,
            84138, 62782, 25960, 75436, 49827, 2677, 41974, 24837, 99840, 98375, 71036, 81504,
            10331, 20994, 76068, 58760, 13155, 21808, 13036, 61045, 63421, 13641, 40660, 81656,
            71921, 76748, 19255, 1083, 24205, 46795, 92409, 18504, 46673, 92332, 16101, 52630,
            26053, 45788, 67487, 91841, 95625, 67971, 3720, 4157, 28981, 33000, 52948, 56461, 67611,
            63221, 52093, 90806, 56365, 75519, 82604, 47417, 57628, 50242, 31681, 26934, 35603,
            86058, 53488, 14581, 9165, 58634, 85964, 74429, 79504, 31719, 49254, 3797, 16697, 10662,
            72817, 19995, 89181, 20375, 34195, 25608, 50946, 35965, 35923, 84968, 16494, 4806,
            74256, 85948, 73705, 43027, 89572, 76268, 39074, 12040, 31535, 36669, 93820, 77873,
            62707, 21770, 13186, 14123, 6597, 43110, 63479, 38133, 14592, 59575, 87822, 37189,
            24811, 76854, 16150, 12826, 31318, 90056, 67161, 24603, 29746, 21679, 93333, 6397,
            49806, 82277, 95326, 87438, 67888, 35263, 67485, 23486, 32937, 84298, 54739, 76847,
            69551, 57041, 88600, 49827, 14429, 80992, 94059, 72734, 62894, 67132, 39381, 71171,
            90762, 78757, 74264, 50394, 33955, 10746, 10734, 53059, 86479, 54220, 80489, 99789,
            89572, 5681, 74724, 9601, 39037, 21811, 71207, 99099, 81844, 14113, 36346, 5399, 11769,
            95001, 23706, 87878, 75140, 56644, 1502, 27696, 24868, 46807, 46152, 45907, 40068,
            56871, 8720, 62967, 91411, 21732, 40292, 93497, 25758, 26159, 2228, 17669, 37615, 61442,
            51347, 99571, 64707, 10837, 98816, 63457, 89837, 68585, 81752, 82466, 65879, 14997,
            83016, 26191, 30720, 56361, 41641, 2407, 68885, 48840, 13715, 20878, 65906, 92299,
            90639, 55166, 85221, 36320, 52951, 27742, 39494, 1544, 49025, 29462, 99644, 67295, 6436,
            43574, 73337, 71555, 18266, 60183, 591, 42071, 81284, 81325, 88727, 69960, 43392, 10934,
            68485, 48802, 91183, 52760, 5567, 4700, 39884, 51722, 77523, 77653, 50351, 74193, 98370,
            90842, 16561, 84987, 10385, 82031, 65760, 14411, 20894, 66057, 90636, 75314, 47068,
            39864, 71025, 76599, 44451, 895, 77740, 13530, 87921, 37872, 25111, 12302, 44510, 73343,
            23931, 80312, 61050, 48925, 74488, 1681, 21825, 76549, 73409, 74437, 82464, 43022,
            73878, 46345, 99240, 47834, 14796, 21495, 54261, 19793, 50068, 53212, 58017, 55420,
            69236, 56370, 86298, 32981, 11536, 57508, 85106, 76121, 37540, 90063, 94035, 95212,
            62771, 31466, 50589, 15029, 91794, 79155, 94990, 2280, 31534, 24050, 54747, 19327,
            23812, 46440, 58810, 37612, 41180, 88373, 64646, 7316, 23850, 93783, 83709, 25414, 9268,
            61570, 44902, 15698, 23718, 8397, 73655, 24393, 37022, 20540, 12838, 78354, 30490,
            75883, 67116, 41946, 76489, 8567, 54292, 71485, 14263, 23037, 9330, 58859, 22949, 65969,
            88821, 72449, 34854, 23071, 84579, 14078, 26206, 98182, 17622, 4001, 57964, 37583,
            72520, 69454, 34686, 97709, 3542, 5845, 55249, 19976, 91313, 55714, 88929, 16986, 29896,
            19607, 68098, 67452, 73791, 23060, 13327, 5976, 96435, 37253, 59810, 47128, 2873, 79658,
            60433, 41844, 71335, 34474, 10878, 47096, 46266, 9710, 65155, 30679, 75182, 53241,
            59533, 35343, 1682, 41796, 666, 63632, 64366, 95882, 90166, 36165, 9776, 37742, 36176,
            10616, 38033, 58300, 91578, 77634, 45441, 18579, 79098, 48000, 39499, 99155, 76833,
            79891, 3574, 91963, 49673, 13801, 23776, 67088, 3319, 98153, 6869, 67812, 34337, 17472,
            45352, 33911, 23186, 96239, 47935, 76485, 37411, 28615, 8244, 67866, 76576, 77550, 6042,
            66775, 19689, 16341, 66619, 2185, 5495, 85483, 77155, 82962, 36796, 7833, 66172, 23091,
            13447
    };

    /**
     * 666 7833
     */
    private static int target = 8499;

    public static void main(String[] args) {

        long start0 = System.currentTimeMillis();
        System.out.println(Arrays.toString(twoSum0(nums, target)));
        long start1 = System.currentTimeMillis();
        System.out.println(Arrays.toString(twoSum1(nums, target)));
        long start2 = System.currentTimeMillis();
        System.out.println(Arrays.toString(twoSum2(nums, target)));

        long start3 = System.currentTimeMillis();
        System.out.println((start1 - start0) + "..." + (start2 - start1) + "..." + (start3
                - start2));
    }

    /**
     * 暴力求解 时间复杂度O(n^2) 空间复杂度O(n)
     *
     * @param nums   nums
     * @param target target
     * @return int[]
     */
    private static int[] twoSum0(int[] nums, int target) {
        int[] res = {-1, -1};
        if (nums == null || nums.length < 2) {
            return res;
        }

        for (int i = 0; i < nums.length - 1; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return res;
    }

    /**
     * hash table 时间复杂度O(n) 空间复杂度O(n)
     *
     * @param nums   nums
     * @param target target
     * @return int[]
     */
    private static int[] twoSum1(int[] nums, int target) {
        int[] res = {-1, -1};
        if (nums == null || nums.length < 2) {
            return res;
        }

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                res[0] = map.get(nums[i]);
                res[1] = i;
                return res;
            }
            map.put(target - nums[i], i);
        }
        return res;
    }

    /**
     * list 实现 在遍历查找 list时导致最终时间复杂度为O(n^2),空间复杂度O(n)
     *
     * @param nums   nums
     * @param target target
     * @return int[]
     */
    private static int[] twoSum2(int[] nums, int target) {
        int[] res = {-1, -1};
        if (nums == null || nums.length < 2) {
            return res;
        }

        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            Integer other = target - nums[i];

            if (list.contains(other)) {
                res[0] = list.indexOf(other);
                res[1] = i;
                return res;
            }
            list.add(nums[i]);
        }
        return res;
    }


}
